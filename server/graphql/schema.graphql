schema {
  query: Root
  mutation: Mutation
}

# Autogenerated input type of CreatePasswordReset
input CreatePasswordResetInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  email: String!
}

# Autogenerated return type of CreatePasswordReset
type CreatePasswordResetPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  user: User
}

# Autogenerated input type of CreatePost
input CreatePostInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  title: String!
  description: String!
  image: Image
}

# Autogenerated return type of CreatePost
type CreatePostPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  postEdge: PostEdge
  user: User
}

# Action::Dispatch Uploaded File
scalar Image

# Autogenerated input type of Login
input LoginInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  email: String!
  password: String!
}

# Autogenerated return type of Login
type LoginPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  user: User
}

# Autogenerated input type of Logout
input LogoutInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of Logout
type LogoutPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  user: User
}

type Mutation {
  createPasswordReset(input: CreatePasswordResetInput!): CreatePasswordResetPayload
  createPost(input: CreatePostInput!): CreatePostPayload
  login(input: LoginInput!): LoginPayload
  logout(input: LogoutInput!): LogoutPayload
  register(input: RegisterInput!): RegisterPayload
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

# A post
type Post {
  # The posts creators
  creator: User

  # The posts description
  description: String
  id: ID!

  # The posts image
  image: String

  # The posts title
  title: String
}

# The connection type for Post.
type PostConnection {
  # A list of edges.
  edges: [PostEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type PostEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Post
}

# Autogenerated input type of Register
input RegisterInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

# Autogenerated return type of Register
type RegisterPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  user: User
}

# Autogenerated input type of ResetPassword
input ResetPasswordInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  newPassword: String!
  token: String!
}

# Autogenerated return type of ResetPassword
type ResetPasswordPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  user: User
}

type Root {
  viewer: Viewer
}

type User {
  # the users email address
  email: String

  # the users first name
  firstName: String
  id: ID!

  # the users last name
  lastName: String
  posts(
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): PostConnection

  # the users role
  role: String
}

type Viewer {
  canPublish: Boolean
  isLoggedIn: Boolean
  post(postId: String): Post
  posts(
    first: Int
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): PostConnection
  user: User
}
